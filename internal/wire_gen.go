// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"github.com/gofiber/fiber/v2"
	"go-service-template/config"
	"go-service-template/internal/biz/taskServ"
	"go-service-template/internal/handler/taskHandle"
	"go-service-template/internal/infrastructure/adapter/cas"
	"go-service-template/internal/infrastructure/repository/taskRepo"
	"go-service-template/internal/middleware"
	"go-service-template/internal/router"
	"go-service-template/pkgs/database/cacheDB"
	"go-service-template/pkgs/database/ormDB"
	"go-service-template/pkgs/gplog"
)

// Injectors from server.go:

func New() (*Server, error) {
	appConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	casAdapter := cas.NewCasAdapter(appConfig)
	authMiddleware := middleware.NewAuthMiddleware(appConfig, casAdapter)
	gorm := ormDB.InitMySQLConn(appConfig)
	taskRepository := taskRepo.NewTaskRepo(gorm)
	taskService := taskServ.NewTaskService(appConfig, taskRepository)
	taskHandleTaskHandle := taskHandle.NewTaskHandle(taskService)
	taskRoute := router.NewTaskRoute(authMiddleware, taskHandleTaskHandle)
	cacheEngine, err := cacheDB.NewCacheEngine(appConfig)
	if err != nil {
		return nil, err
	}
	server := NewServer(appConfig, taskRoute, gorm, cacheEngine)
	return server, nil
}

// server.go:

type Server struct {
	cfg      *config.AppConfig
	app      *fiber.App
	_ormDB   ormDB.Gorm
	_cacheDB cacheDB.CacheEngine
}

func NewServer(
	cfg *config.AppConfig,

	taskRouter router.TaskRoute,

	_ormDB ormDB.Gorm,
	_cacheDB cacheDB.CacheEngine,
) *Server {
	app := InitFiberApp(cfg)

	v1 := app.Group("/v1")
	taskRouter.Init(&v1)

	return &Server{
		cfg:      cfg,
		app:      app,
		_ormDB:   _ormDB,
		_cacheDB: _cacheDB,
	}
}

func (serv Server) App() *fiber.App {
	return serv.app
}

func (serv Server) Config() *config.AppConfig {
	return serv.cfg
}

func (serv Server) Shutdown() {

	_ = serv._ormDB.Close()
	_ = serv._cacheDB.Close()

	if err := serv.app.Shutdown(); err != nil {
		gplog.Errorf("Failed to shutdown fiber app cause:%v", err)
	}
}
